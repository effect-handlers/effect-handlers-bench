effect Choice {
  choose: () -> bool
}

type list =
    | Nil
    | Cons of int * list

type tree = 
    | Leaf
    | Node of int * tree * tree

def append(l1: list, l2: list): list {
    match l1 with
    | Nil -> { l2 }
    | Cons (h, t) -> {
        Cons (h, append(t, l2))
    }
}

def list_max(l: list): int {
    rec def list_max_rec <> (l: list, acc: int): int {
        match l with
        | Nil -> { acc }
        | Cons (h, t) -> { 
            // ~printInt(h);
            if h > acc then
                list_max_rec(t, h)
            else
                list_max_rec(t, acc)
        } 
    };
    list_max_rec(l, 0)
}


def operator(x: int, y: int): int {
    ~mathAbs((x - 503 * y) + 37) % 1009
}

def make(n: int): tree {
    if n == 0 then
        Leaf
    else
        val t = make(n - 1);
        Node(n, t, t)
}

def explore [; choice_stub: Choice] (state: ref int, tre: tree): int {
    match tre with
    | Leaf -> { state[0] }
    | Node (value, left, right) -> {
        val next = 
            if raise choice_stub.choose() then 
                left
            else
                right
        ;
        state[0] := operator(state[0], value);
        operator(value, explore:[; choice_stub](state, next))
    }
}

def paths(state: ref int, tre: tree): list {
    handle <> {
        Cons (explore:[; choice_stub](state, tre), Nil)
    } with choice_stub: Choice {
        hdl_s choose(k) {
            val arg1 = resume k true;
            val arg2 = resume_final k false;
            append(arg1, arg2)
        }        
    }
}

def loop(state: ref int, tre: tree, i: int): int {
    if i == 0 then
        state[0]
    else
        (state[0] := list_max(paths(state, tre));
        loop(state, tre, i - 1))
}

def run(n: int): int {
    val tre = make(n);
    val state = newref {0};
        loop(state, tre, 10)
}

def main(): int {
    val n = ~readInt();
    val res = run(n);
    ~printInt(res);
    0
}