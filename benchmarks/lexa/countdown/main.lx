effect State {
    get: () -> int
    set: (int) -> unit
}

def countdown [; state_stub: State] (): int {
    val i = raise state_stub.get();
    if i == 0 then
        i
    else (
        raise state_stub.set(i-1);
        countdown:[; state_stub]()
    )
}

def run(n: int): int {
    val s = newref {n};
    handle <> {
        countdown:[; state_stub]()
    } with state_stub: State {
        def get() { 
            s[0]
        }

        def set(i) {
            s[0] := i;
            0
        }
    }
}

def main(): int {
    ~printInt(run(~readInt()));
    0
}