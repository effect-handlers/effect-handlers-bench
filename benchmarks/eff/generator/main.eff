effect Yield : int -> unit

type tree = Leaf | Node of tree * int * tree

type generator = Empty | Thunk of int * (unit -> generator)

let run n =
  let rec make = function
    | 0 -> Leaf
    | n -> let t = make (n-1) in Node (t, n, t) in

  let rec iterate = function
    | Leaf -> ()
    | Node (l, v, r) -> iterate l; perform (Yield v); iterate r in

  let rec generate f =
    let h = handler
      | _x -> Empty
      | effect (Yield x) k -> Thunk (x, k)
    in
    with h handle f () in

  let rec sum a = function
    | Empty -> a
    | Thunk (v, f) -> sum (v + a) (f ()) in

  sum 0 (generate (fun () -> iterate (make n)))

