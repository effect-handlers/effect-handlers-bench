(* A n-queens implementation without top-level bindings and no polymorphism *)

effect Pick : int -> int
effect Fail : unit -> empty

type queen =  int * int
type rows = RowsEmpty | RowsCons of int * rows

let queens_count n =
  let rec safe queen diag xs =
    match xs with
    | RowsEmpty -> true
    | RowsCons(q, qs) -> 
        queen <> q && queen <> q + diag && queen <> q - diag && 
        safe queen (diag + 1) qs
  in
  let rec find_solution (n, col) =
    let absurd void = (match void with) in
    if col = 0 then RowsEmpty
    else (
      let sol = find_solution (n, (col - 1)) in
      let queen = perform (Pick n) in
      if safe queen 1 sol then RowsCons(queen, sol) else absurd (perform (Fail ()))
    )
  in
  handle (find_solution (n, n)) with
  | _x -> 1
  | effect (Fail ()) k -> 0
  | effect (Pick n) k ->
      let rec loop i acc =
        if i = n then (k i) + acc
        else loop (i+1) ((k i) + acc)
      in loop 1 0
