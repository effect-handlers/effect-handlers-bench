
effect Choose : unit -> bool
effect Get: unit -> int
effect Set: int -> unit

type tree
 = Leaf
 | Node of tree * int * tree


let op x y = abs (x - (503 * y) + 37) mod 1009

type intlist = Nil | Cons of (int * intlist)

let rec ( @ ) xs ys =
  match xs with
  | Nil -> ys
  | Cons (x, xs) -> Cons (x, xs @ ys)

let rec make_tree = function
  | 0 -> Leaf
  | n ->
    let t = make_tree (n - 1) in
    Node (t, n, t)

let max a b = if a > b then a else b

(* Eff is currently unable to automatically optimize nested handlers so we merge them by hand *)

let max_path_merged_handler m = 
  let rec maxl acc = function
  | Nil -> acc
  | Cons(x, xs) -> maxl (max x acc) xs
  in
  let ___t = make_tree m in
  let rec explore t = match t with
    | Leaf -> perform (Get ())
    | Node (left, x, right) -> 
      let next = if (perform (Choose ())) then left else right in
      let state = perform (Get ()) in
      let q = op state x in
      perform (Set q);
      (op x (explore next))
  in
  let monad_state = handler
  | y -> (fun u -> (u, Cons(y, Nil)))
  | effect (Get ()) k -> (
    fun s -> (k s) s
    )
  | effect (Set s) k -> (
    fun _ -> (k ()) s
  )
  | effect (Choose ()) k -> (fun s -> 
      match ((k true) s) with
      | (s', l) ->
        ( match ((k false) s') with
          | (s', r) -> (s', l @ r)
        )
  )
  in
  let rec looper s n = 
    if n = 0 then 
      s 
    else (
    let s = match ((with monad_state handle explore ___t) s)
    with (s', l) -> (
      maxl 0 l
    )  
    in looper s (n - 1)
    )
  in
  looper 0 10