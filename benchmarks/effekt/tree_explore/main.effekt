import immutable/list
import immutable/option
import io/args
import text/string


def abs(n: Int): Int = if (n < 0) 0 - n else n
def max(n: Int, m: Int): Int = if (n > m) n else m


effect Choose {
  def choose(): Boolean
}

type Tree[A] {
  Leaf();
  Node(left: Tree[A], v: A, right: Tree[A])
}

def operator(x: Int, y: Int): Int =
  mod(abs(x - (503 * y) + 37), 1009)

def makeTree(n: Int): Tree[Int] = {
  if (n == 0) {
    Leaf()
  } else {
    val sub = makeTree(n - 1)
    Node(sub, n, sub)
  }
}

def maxL(l: List[Int]): Int = l match {
  case Nil() => -1 // -inf
  case Cons(x, Nil()) => x
  case Cons(x, xs) => max(x, maxL(xs))
}

def sumPaths(tree: Tree[Int]): Int = {
  var state = 0

  def explore(tr: Tree[Int]): Int / Choose = tr match {
    case Leaf() => state
    case Node(left, v, right) =>
      val next = if (do choose()) left else right
      state = operator(state, v)
      operator(v, explore(next))
  }

  def chooseHandler(): List[Int] =
    try {
      Cons(explore(tree), Nil())
    } with Choose {
      def choose() = append(resume(true), resume(false))
    }

  def iterate(n: Int): Int =
    if (n == 0) {
      state
    } else {
      state = maxL(chooseHandler())
      iterate(n - 1)
    }

  iterate(10)
}


def main() = commandLineArgs() match {
  case Nil() => println(sumPaths(makeTree(10)))
  case Cons(x, Nil()) => toInt(x) match {
    case None() => println("Unexpected non-integer '" ++ show(x) ++ "'")
    case Some(i) => println(sumPaths(makeTree(i)))
  }
  case other => println("Expects zero or one argument, not '" ++ show(size(other)) ++ "'")
}
