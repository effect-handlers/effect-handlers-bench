import immutable/list
import immutable/option
import io/args
import text/string

effect Abort {
    def done[A](i: Int): A
}

def product(xs: List[Int]): Int / Abort = {
    xs match {
        case Nil() => 0
        case Cons(y, ys) => if (y == 0) { do done(0) } else { y * product(ys) }
    }
}

def enumerate(i: Int): List[Int] = {
    if (i < 0) {
        Nil()
    } else {
        Cons(i, enumerate(i - 1))
    }
}

def runProduct(xs: List[Int]) = {
    try {
        product(xs)
    } with Abort {
        def done[A](i) = i
    }
}

def run(n: Int) = {
    val xs = enumerate(1000)
    def loop(i: Int, a: Int): Int = {
        if (i == 0) {
            a 
        } else { 
            loop (i - 1, a + runProduct(xs))
        }
    }
    loop(n,0)
}

def main() = commandLineArgs() match {
  case Nil() => println(run(5))
  case Cons(x, Nil()) => toInt(x) match {
    case None() => println("Unexpected non-integer '" ++ show(x) ++ "'")
    case Some(i) => println(run(i))
  }
  case other => println("Expects zero or one argument, not '" ++ show(size(other)) ++ "'")
}