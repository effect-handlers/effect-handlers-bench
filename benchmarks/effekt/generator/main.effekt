import immutable/list
import immutable/option
import text/string
import io/args

effect Yield {
  def yield(num: Int): Unit
}

type Tree {
  Leaf();
  Node(left: Tree, value: Int, right: Tree)
}

interface Generator {
  def value(): Option[Int]
  def next(): Unit
}

def makeTree(n: Int): Tree =
  if (n == 0) { Leaf() } else {
    val sub = makeTree(n - 1)
    Node(sub, n, sub)
  }

def generator { prog: => Unit / Yield } {r: Region}: Generator at {prog, r} = {
  var v: Option[Int] in r = None();
  var cont: () => Unit at {prog, r} in r = box { () };

  try { prog(); v = None() } with Yield {
    def yield(x) = {
      v = Some(x);
      cont = box { resume(()) }
    }
  }
  new Generator {
    def value() = v
    def next() = cont()
  }
}

def sumGenerator(n: Int): Int = region r {
  val tree = makeTree(n)

  def iterate(tree: Tree): Unit / Yield = tree match {
    case Leaf() => ()
    case Node(left, v, right) =>
      iterate(left)
      do yield(v)
      iterate(right)
  }

  def gen = generator { iterate(tree) } {r}

  def consumer(acc: Int): Int =
    gen.value() match {
      case None() => acc
      case Some(v) =>
        gen.next();
        consumer(acc + v)
    }

  consumer(0)
}

def main() = commandLineArgs() match {
  case Nil() => println(sumGenerator(10))
  case Cons(x, Nil()) => toInt(x) match {
    case None() => println("Unexpected non-integer '" ++ show(x) ++ "'")
    case Some(i) => println(sumGenerator(i))
  }
  case other => println("Expects zero or one argument, not '" ++ show(size(other)) ++ "'")
}
